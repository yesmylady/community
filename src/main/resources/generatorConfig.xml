<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <context id="DB2Tables" targetRuntime="MyBatis3">
<!--        分页函数要想用 offset + limit 的方式查询数据库，需要添加如下插件-->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin"></plugin>

        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://localhost:3306/community"
                        userId="root"
                        password="199911">
<!--            找不对community里的user表！把下边table栏的schema删掉，再在这加上这个-->
            <property name="nullCatalogMeansCurrent" value="true" />
        </jdbcConnection>

        <javaTypeResolver >
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!--        生成model层java实体 和其example class
        The Example class contains a set of Criteria objects,
        each of which represents a condition on a column in the database table.
        -->
        <javaModelGenerator targetPackage="com.example.community.model" targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

<!--        生成数据库CURD的xml文件-->
        <sqlMapGenerator targetPackage="mapper"  targetProject="src/main/resources">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

<!--        生成与xml对应的mapper层接口-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.example.community.mapper"  targetProject="src/main/java">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

<!--
确定最底层的数据库表
schema一般没有，不填；tableName即database中的表名；domainObjectName即生成的model层对象名字q
useActualColumnNames: model层使用数据库表原列名，默认false驼峰写法，所以注释掉
-->
       <table tableName="user" domainObjectName="User" >
<!--            <property name="useActualColumnNames" value="true"/>-->
<!--            <generatedKey column="ID" sqlStatement="DB2" identity="true" />-->
<!--            <columnOverride column="DATE_FIELD" property="startDate" />-->
<!--            <ignoreColumn column="FRED" />-->
<!--            <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" />-->
        </table>

        <table tableName="question" domainObjectName="Question">
<!-- don't know why, this 'description' column hadn't been generated,
so now I need to denote it manually, then regenerate pojo.
重点是指定text字段为jdbcType中的varchar！-->
            <columnOverride column="description" jdbcType="VARCHAR" javaType="String" />
        </table>

        <table tableName="comment" domainObjectName="Comment"></table>
        <table tableName="notification" domainObjectName="Notification"></table>

    </context>
</generatorConfiguration>